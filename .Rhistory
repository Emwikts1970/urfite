lag.max <- abs(as.integer(lag.max))
type <- match.arg(type)
lag <- abs(as.integer(lag.max + 1))
"VARselect" <-
function (y, lag.max = 10, type = c("const", "trend", "both",
"none"), season = NULL, exogen = NULL)
{
y <- as.matrix(y)
if (any(is.na(y)))
stop("\nNAs in y.\n")
colnames(y) <- make.names(colnames(y))
K <- ncol(y)
lag.max <- abs(as.integer(lag.max))
type <- match.arg(type)
lag <- abs(as.integer(lag.max + 1))
ylagged <- embed(y, lag)[, -c(1:K)]
yendog <- y[-c(1:lag.max), ]
sample <- nrow(ylagged)
rhs <- switch(type, const = rep(1, sample), trend = seq(lag.max + 1,
length = sample), both = cbind(rep(1, sample), seq(lag.max + 1, length = sample)), none = NULL)
if (!(is.null(season))) {
season <- abs(as.integer(season))
dum <- (diag(season) - 1/season)[, -season]
dums <- dum
while (nrow(dums) < sample) {
dums <- rbind(dums, dum)
}
dums <- dums[1:sample, ]
rhs <- cbind(rhs, dums)
}
if (!(is.null(exogen))) {
exogen <- as.matrix(exogen)
if (!identical(nrow(exogen), nrow(y))) {
stop("\nDifferent row size of y and exogen.\n")
}
if (is.null(colnames(exogen))) {
colnames(exogen) <- paste("exo", 1:ncol(exogen),
sep = "")
warning(paste("No column names supplied in exogen, using:",
paste(colnames(exogen), collapse = ", "), ", instead.\n"))
}
colnames(exogen) <- make.names(colnames(exogen))
rhs <- cbind(rhs, exogen[-c(1:lag.max), ])
}
idx <- seq(K, K * lag.max, K)
if(!is.null(rhs)){
detint <- ncol(as.matrix(rhs))
} else {
detint <- 0
}
criteria <- matrix(NA, nrow = 4, ncol = lag.max)
rownames(criteria) <- c("AIC(n)", "HQ(n)", "SC(n)", "FPE(n)")
colnames(criteria) <- paste(seq(1:lag.max))
for (i in 1:lag.max) {
ys.lagged <- cbind(ylagged[, c(1:idx[i])], rhs)
sampletot <- nrow(y)
nstar <- ncol(ys.lagged)
resids <- lm.fit(x=ys.lagged, y=yendog)$residuals
sigma.det <- det(crossprod(resids)/sample)
criteria[1, i] <- log(sigma.det) + (2/sample) * (i * K^2 + K * detint)
criteria[2, i] <- log(sigma.det) + (2 * log(log(sample))/sample) * (i * K^2 + K * detint)
criteria[3, i] <- log(sigma.det) + (log(sample)/sample) * (i * K^2 + K * detint)
criteria[4, i] <- ((sample + nstar)/(sample - nstar))^K * sigma.det
}
order <- apply(criteria, 1, which.min)
return(list(selection = order, criteria = criteria))
}
"VARselect" <-
function (y, lag.max = 10, type = c("const", "trend", "both",
"none"), season = NULL, exogen = NULL)
{
y <- as.matrix(y)
if (any(is.na(y)))
stop("\nNAs in y.\n")
colnames(y) <- make.names(colnames(y))
K <- ncol(y)
lag.max <- abs(as.integer(lag.max))
type <- match.arg(type)
lag <- abs(as.integer(lag.max + 1))
ylagged <- embed(y, lag)[, -c(1:K)]
yendog <- y[-c(1:lag.max), ]
sample <- nrow(ylagged)
rhs <- switch(type, const = rep(1, sample), trend = seq(lag.max + 1,
length = sample), both = cbind(rep(1, sample), seq(lag.max + 1, length = sample)), none = NULL)
if (!(is.null(season))) {
season <- abs(as.integer(season))
dum <- (diag(season) - 1/season)[, -season]
dums <- dum
while (nrow(dums) < sample) {
dums <- rbind(dums, dum)
}
dums <- dums[1:sample, ]
rhs <- cbind(rhs, dums)
}
if (!(is.null(exogen))) {
exogen <- as.matrix(exogen)
if (!identical(nrow(exogen), nrow(y))) {
stop("\nDifferent row size of y and exogen.\n")
}
if (is.null(colnames(exogen))) {
colnames(exogen) <- paste("exo", 1:ncol(exogen),
sep = "")
warning(paste("No column names supplied in exogen, using:",
paste(colnames(exogen), collapse = ", "), ", instead.\n"))
}
colnames(exogen) <- make.names(colnames(exogen))
rhs <- cbind(rhs, exogen[-c(1:lag.max), ])
}
idx <- seq(K, K * lag.max, K)
if(!is.null(rhs)){
detint <- ncol(as.matrix(rhs))
} else {
detint <- 0
}
criteria <- matrix(NA, nrow = 4, ncol = lag.max)
rownames(criteria) <- c("AIC(n)", "HQ(n)", "SC(n)", "FPE(n)")
colnames(criteria) <- paste(seq(1:lag.max))
for (i in 1:lag.max) {
ys.lagged <- cbind(ylagged[, c(1:idx[i])], rhs)
sampletot <- nrow(y)
nstar <- ncol(ys.lagged)
resids <- lm.fit(x=ys.lagged, y=yendog)$residuals
sigma.det <- det(crossprod(resids)/sample)
criteria[1, i] <- log(sigma.det) + (2/sample) * (i * K^2 + K * detint)
criteria[2, i] <- log(sigma.det) + (2 * log(log(sample))/sample) * (i * K^2 + K * detint)
criteria[3, i] <- log(sigma.det) + (log(sample)/sample) * (i * K^2 + K * detint)
criteria[4, i] <- ((sample + nstar)/(sample - nstar))^K * sigma.det
}
order <- apply(criteria, 1, which.min)
return(list(selection = order, criteria = criteria, bla = "BLA"))
}
VARselect(y)
"VARselect" <-
function (y, lag.max = 10, type = c("const", "trend", "both",
"none"), season = NULL, exogen = NULL)
{
y <- as.matrix(y)
if (any(is.na(y)))
stop("\nNAs in y.\n")
colnames(y) <- make.names(colnames(y))
K <- ncol(y)
lag.max <- abs(as.integer(lag.max))
type <- match.arg(type)
cat(type)
lag <- abs(as.integer(lag.max + 1))
ylagged <- embed(y, lag)[, -c(1:K)]
yendog <- y[-c(1:lag.max), ]
sample <- nrow(ylagged)
rhs <- switch(type, const = rep(1, sample), trend = seq(lag.max + 1,
length = sample), both = cbind(rep(1, sample), seq(lag.max + 1, length = sample)), none = NULL)
if (!(is.null(season))) {
season <- abs(as.integer(season))
dum <- (diag(season) - 1/season)[, -season]
dums <- dum
while (nrow(dums) < sample) {
dums <- rbind(dums, dum)
}
dums <- dums[1:sample, ]
rhs <- cbind(rhs, dums)
}
if (!(is.null(exogen))) {
exogen <- as.matrix(exogen)
if (!identical(nrow(exogen), nrow(y))) {
stop("\nDifferent row size of y and exogen.\n")
}
if (is.null(colnames(exogen))) {
colnames(exogen) <- paste("exo", 1:ncol(exogen),
sep = "")
warning(paste("No column names supplied in exogen, using:",
paste(colnames(exogen), collapse = ", "), ", instead.\n"))
}
colnames(exogen) <- make.names(colnames(exogen))
rhs <- cbind(rhs, exogen[-c(1:lag.max), ])
}
idx <- seq(K, K * lag.max, K)
if(!is.null(rhs)){
detint <- ncol(as.matrix(rhs))
} else {
detint <- 0
}
criteria <- matrix(NA, nrow = 4, ncol = lag.max)
rownames(criteria) <- c("AIC(n)", "HQ(n)", "SC(n)", "FPE(n)")
colnames(criteria) <- paste(seq(1:lag.max))
for (i in 1:lag.max) {
ys.lagged <- cbind(ylagged[, c(1:idx[i])], rhs)
sampletot <- nrow(y)
nstar <- ncol(ys.lagged)
resids <- lm.fit(x=ys.lagged, y=yendog)$residuals
sigma.det <- det(crossprod(resids)/sample)
criteria[1, i] <- log(sigma.det) + (2/sample) * (i * K^2 + K * detint)
criteria[2, i] <- log(sigma.det) + (2 * log(log(sample))/sample) * (i * K^2 + K * detint)
criteria[3, i] <- log(sigma.det) + (log(sample)/sample) * (i * K^2 + K * detint)
criteria[4, i] <- ((sample + nstar)/(sample - nstar))^K * sigma.det
}
order <- apply(criteria, 1, which.min)
return(list(selection = order, criteria = criteria, bla = "BLA"))
}
VARselect(y)
"VARselect" <-
function (y, lag.max = 10, type = c("const", "trend", "both",
"none"), season = NULL, exogen = NULL)
{
y <- as.matrix(y)
if (any(is.na(y)))
stop("\nNAs in y.\n")
colnames(y) <- make.names(colnames(y))
K <- ncol(y)
lag.max <- abs(as.integer(lag.max))
type <- match.arg(type)
print(type)
lag <- abs(as.integer(lag.max + 1))
ylagged <- embed(y, lag)[, -c(1:K)]
yendog <- y[-c(1:lag.max), ]
sample <- nrow(ylagged)
rhs <- switch(type, const = rep(1, sample), trend = seq(lag.max + 1,
length = sample), both = cbind(rep(1, sample), seq(lag.max + 1, length = sample)), none = NULL)
if (!(is.null(season))) {
season <- abs(as.integer(season))
dum <- (diag(season) - 1/season)[, -season]
dums <- dum
while (nrow(dums) < sample) {
dums <- rbind(dums, dum)
}
dums <- dums[1:sample, ]
rhs <- cbind(rhs, dums)
}
if (!(is.null(exogen))) {
exogen <- as.matrix(exogen)
if (!identical(nrow(exogen), nrow(y))) {
stop("\nDifferent row size of y and exogen.\n")
}
if (is.null(colnames(exogen))) {
colnames(exogen) <- paste("exo", 1:ncol(exogen),
sep = "")
warning(paste("No column names supplied in exogen, using:",
paste(colnames(exogen), collapse = ", "), ", instead.\n"))
}
colnames(exogen) <- make.names(colnames(exogen))
rhs <- cbind(rhs, exogen[-c(1:lag.max), ])
}
idx <- seq(K, K * lag.max, K)
if(!is.null(rhs)){
detint <- ncol(as.matrix(rhs))
} else {
detint <- 0
}
criteria <- matrix(NA, nrow = 4, ncol = lag.max)
rownames(criteria) <- c("AIC(n)", "HQ(n)", "SC(n)", "FPE(n)")
colnames(criteria) <- paste(seq(1:lag.max))
for (i in 1:lag.max) {
ys.lagged <- cbind(ylagged[, c(1:idx[i])], rhs)
sampletot <- nrow(y)
nstar <- ncol(ys.lagged)
resids <- lm.fit(x=ys.lagged, y=yendog)$residuals
sigma.det <- det(crossprod(resids)/sample)
criteria[1, i] <- log(sigma.det) + (2/sample) * (i * K^2 + K * detint)
criteria[2, i] <- log(sigma.det) + (2 * log(log(sample))/sample) * (i * K^2 + K * detint)
criteria[3, i] <- log(sigma.det) + (log(sample)/sample) * (i * K^2 + K * detint)
criteria[4, i] <- ((sample + nstar)/(sample - nstar))^K * sigma.det
}
order <- apply(criteria, 1, which.min)
return(list(selection = order, criteria = criteria, bla = "BLA"))
}
VARselect(y)
"VARselect" <-
function (y, lag.max = 10, type = c("const", "trend", "both",
"none"), season = NULL, exogen = NULL)
{
y <- as.matrix(y)
if (any(is.na(y)))
stop("\nNAs in y.\n")
colnames(y) <- make.names(colnames(y))
K <- ncol(y)
lag.max <- abs(as.integer(lag.max))
type <- match.arg(type)
lag <- abs(as.integer(lag.max + 1))
ylagged <- embed(y, lag)[, -c(1:K)]
yendog <- y[-c(1:lag.max), ]
sample <- nrow(ylagged)
rhs <- rep(1, sample)
if (!(is.null(season))) {
season <- abs(as.integer(season))
dum <- (diag(season) - 1/season)[, -season]
dums <- dum
while (nrow(dums) < sample) {
dums <- rbind(dums, dum)
}
dums <- dums[1:sample, ]
rhs <- cbind(rhs, dums)
}
if (!(is.null(exogen))) {
exogen <- as.matrix(exogen)
if (!identical(nrow(exogen), nrow(y))) {
stop("\nDifferent row size of y and exogen.\n")
}
if (is.null(colnames(exogen))) {
colnames(exogen) <- paste("exo", 1:ncol(exogen),
sep = "")
warning(paste("No column names supplied in exogen, using:",
paste(colnames(exogen), collapse = ", "), ", instead.\n"))
}
colnames(exogen) <- make.names(colnames(exogen))
rhs <- cbind(rhs, exogen[-c(1:lag.max), ])
}
idx <- seq(K, K * lag.max, K)
if(!is.null(rhs)){
detint <- ncol(as.matrix(rhs))
} else {
detint <- 0
}
criteria <- matrix(NA, nrow = 4, ncol = lag.max)
rownames(criteria) <- c("AIC(n)", "HQ(n)", "SC(n)", "FPE(n)")
colnames(criteria) <- paste(seq(1:lag.max))
for (i in 1:lag.max) {
ys.lagged <- cbind(ylagged[, c(1:idx[i])], rhs)
sampletot <- nrow(y)
nstar <- ncol(ys.lagged)
resids <- lm.fit(x=ys.lagged, y=yendog)$residuals
sigma.det <- det(crossprod(resids)/sample)
criteria[1, i] <- log(sigma.det) + (2/sample) * (i * K^2 + K * detint)
criteria[2, i] <- log(sigma.det) + (2 * log(log(sample))/sample) * (i * K^2 + K * detint)
criteria[3, i] <- log(sigma.det) + (log(sample)/sample) * (i * K^2 + K * detint)
criteria[4, i] <- ((sample + nstar)/(sample - nstar))^K * sigma.det
}
order <- apply(criteria, 1, which.min)
return(list(selection = order, criteria = criteria, bla = "BLA"))
}
VARselect(y)
ylagged
K
idx <- seq(K, K * lag.max, K)
idx
cbind(ylagged[, c(1:idx[i])], rhs)
rhs <- rep(1, sample)
cbind(ylagged[, c(1:idx[i])], rhs)
y
t(y)
ylagged
i=1
cbind(ylagged[, c(1:idx[i])], rhs)
install.packages("rbokeh")
df
mtcars
- \usepackage{xcolor}
my_display <- "s|f|f|f|f|f|f|f|f|f|f|"
my_display <- "s|f|f|f|f|f|f|f|f|f|f|f"
install.packages("webshot")
crossFnc <- function(gamma_dot) {
tau - gamma_dot*(eta_inf + (eta_0-eta_inf)/(1 + (lambda*gamma_dot)^m))
}
eta_inf = -0.0139
eta_0 = 178.5
lambda = 2.4954
m = 0.83094
tau=10
uniroot(crossFnc, c(0,1))$root
tau <- seq(0,10,length.out=101)
sapply(tau,uniroot(crossFnc, c(0,1))$root )
tau
sapply(tau, function(x) {
uniroot(crossFnc, c(0,1), tau=x)$root )
}
sapply(tau, function(x) {
uniroot(crossFnc, c(0,1), tau=x)$root
})
crossFnc <- function(gamma_dot, tau) {
tau - gamma_dot*(eta_inf + (eta_0-eta_inf)/(1 + (lambda*gamma_dot)^m))
}
tau <- seq(0,10,length.out=101)
sapply(tau, function(x) {
uniroot(crossFnc, c(0,1), tau=x)$root
})
tau <- seq(0,10,length.out=10)
sapply(tau, function(x) {
uniroot(crossFnc, c(0,1), tau=x)$root
})
myRoots <- sapply(tau, function(x) {
uniroot(crossFnc, c(0,1), tau=x)$root
})
myRoots
seq <- rep(0:9, 10)
seq
comb <- combn(seq, 10)
combn
?combn
seq
combn
comb <- combn(seq, 10)
comb <- combn(0:9, 10, replace=T)
comb
combn(0:9, 10, replace=T)
seq <- rep(0:9, 10)
seq
10^10
df1 = data.table(names=c('a','b','c','c','d'),year=c(11,12,13,14,15), Times=c(1,1,3,5,6))
df2 = data.table(names=c('a','e','e','c','c','d'),year=c(12,12,13,15,16,16), Times=c(2,2,4,6,7,7))
library(data.table)
df1 = data.table(names=c('a','b','c','c','d'),year=c(11,12,13,14,15), Times=c(1,1,3,5,6))
df2 = data.table(names=c('a','e','e','c','c','d'),year=c(12,12,13,15,16,16), Times=c(2,2,4,6,7,7))
df1
df1
df1[df2]
setkey(df1, names, year)
df1[df2,,]
df1[df2,]
setkey(df1, names, year)
setkey(df2, names, year)
df1[df2,]
df1[df2,with=FALSE]
df1[df2,,with=FALSE]
df1[df2,min(Times),with=FALSE]
df1[df2,Times == min(Times),with=FALSE]
merge(df1,df2)
df1 = data.table(names=c('a','b','c','c','d'),year=c(11,12,13,14,15), Times=c(1,1,3,5,6))
df2 = data.table(names=c('a','e','e','c','c','d'),year=c(12,12,13,15,16,16), Times=c(2,2,4,6,7,7))
merge(df1,df2)
merge(df1,df2, all = TRUE)
merge(df1,df2, all = TRUE, by=names)
setkey(df1, Times)
setkey(df2, Times)
df1[df2,]
df1[df2, multiple = "first"]
df1[df2,, multiple = "first"]
df1[df2,, mult = "first"]
df1 = data.table(names=c('a','b','c','c','d'),year=c(11,12,13,14,15), Times=c(1,1,3,5,6))
df2 = data.table(names=c('a','e','e','c','c','d'),year=c(12,12,13,15,16,16), Times=c(2,2,4,6,7,7))
df1[df2,, by=.(names, year),mult = "first"]
df1[, by=.(names, year),mult = "first"]
df1[, by=.(names, year),mult = "last"]
df1[df2, by=.(names, year),mult = "last"]
df1[df2, ,by=.(names, year),mult = "last"]
df1[df2, with=TRUE]
merge(df1, df2, all=TRUE, sort=Times)
merge(df1, df2, all=TRUE, sort=TRUE)
setkey(df1, names, year, Times)
merge(df1, df2, all=TRUE, sort=TRUE)
df <- merge(df1, df2, all=TRUE, sort=TRUE)
df
df <- merge(df1, df2, all=TRUE, sort=TRUE)[,,mult="first"]
df
df <- merge(df1, df2, all=TRUE, sort=TRUE)[,,by=Times,mult="first"]
df
df <- merge(df1, df2, all=TRUE, sort=TRUE)[,,by=names,mult="first"]
df
df[,,by=names,mult="first"]
df[min(Times),,by=names,mult="first"]
df[,,by=names,mult="first"]
df[,,by=.(names,year),mult="first"]
cars
names(cars)
library(dplyr)
cars %>%
filter(speed > 20) %>%
rename(speed = new_speed)
cars %>%
filter(speed > 20) %>%
rename(speed = 'new_speed')
cars %>%
filter(speed > 20) %>%
rename(speed = "new_speed")
cars %>%
filter(speed > 20) %>%
rename(speed = new_speed)
cars %>%
filter(speed > 20) %>%
dplyr::rename(speed = new_speed)
dplyr::rename(cars, speed = new_speed)
dplyr::rename(cars, speed = 'new_speed')
dplyr::rename(cars, new_speed = speed)
data <- structure(list(timestamp = c(1401581040991, 1401581230769, 1401581410907,
1401581591597, 1401581960830, 1401582002091, 1401582140958, 1401582330515,
1401585071017, 1401585432174, 1401585641225, 1401586011911, 1401587120695,
1401588721173, 1401589081689, 1401581041819, 1401585363131, 1401586083812,
1401586983743, 1401588785148), timestamp_pretty = structure(c(1L,
3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 12L, 13L, 14L, 17L, 18L, 20L,
2L, 11L, 15L, 16L, 19L), .Label = c("01/06/2014 00:04:00", "01/06/2014 00:04:01",
"01/06/2014 00:07:10", "01/06/2014 00:10:10", "01/06/2014 00:13:11",
"01/06/2014 00:19:20", "01/06/2014 00:20:02", "01/06/2014 00:22:20",
"01/06/2014 00:25:30", "01/06/2014 01:11:11", "01/06/2014 01:16:03",
"01/06/2014 01:17:12", "01/06/2014 01:20:41", "01/06/2014 01:26:51",
"01/06/2014 01:28:03", "01/06/2014 01:43:03", "01/06/2014 01:45:20",
"01/06/2014 02:12:01", "01/06/2014 02:13:05", "01/06/2014 02:18:01"
), class = "factor"), mmsi = c(205477000L, 205477000L, 205477000L,
205477000L, 205477000L, 205477000L, 205477000L, 205477000L, 205477000L,
205477000L, 205477000L, 205477000L, 205477000L, 205477000L, 205477000L,
205482000L, 205482000L, 205482000L, 205482000L, 205482000L),
diff_time_seconds = c(NA, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
2L, 1L, 1L, 3L, 1L, 2L, NA, 9L, 4L, 1L, 3L)), .Names = c("timestamp",
"timestamp_pretty", "mmsi", "diff_time_seconds"), row.names = c(NA,
-20L), class = c("data.table", "data.frame"), .internal.selfref = <pointer: 0x00000000001e0788>, sorted = "mmsi")
data <- structure(list(timestamp = c(1401581040991, 1401581230769, 1401581410907,
1401581591597, 1401581960830, 1401582002091, 1401582140958, 1401582330515,
1401585071017, 1401585432174, 1401585641225, 1401586011911, 1401587120695,
1401588721173, 1401589081689, 1401581041819, 1401585363131, 1401586083812,
1401586983743, 1401588785148), timestamp_pretty = structure(c(1L,
3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 12L, 13L, 14L, 17L, 18L, 20L,
2L, 11L, 15L, 16L, 19L), .Label = c("01/06/2014 00:04:00", "01/06/2014 00:04:01",
"01/06/2014 00:07:10", "01/06/2014 00:10:10", "01/06/2014 00:13:11",
"01/06/2014 00:19:20", "01/06/2014 00:20:02", "01/06/2014 00:22:20",
"01/06/2014 00:25:30", "01/06/2014 01:11:11", "01/06/2014 01:16:03",
"01/06/2014 01:17:12", "01/06/2014 01:20:41", "01/06/2014 01:26:51",
"01/06/2014 01:28:03", "01/06/2014 01:43:03", "01/06/2014 01:45:20",
"01/06/2014 02:12:01", "01/06/2014 02:13:05", "01/06/2014 02:18:01"
), class = "factor"), mmsi = c(205477000L, 205477000L, 205477000L,
205477000L, 205477000L, 205477000L, 205477000L, 205477000L, 205477000L,
205477000L, 205477000L, 205477000L, 205477000L, 205477000L, 205477000L,
205482000L, 205482000L, 205482000L, 205482000L, 205482000L),
diff_time_seconds = c(NA, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
2L, 1L, 1L, 3L, 1L, 2L, NA, 9L, 4L, 1L, 3L)), .Names = c("timestamp",
"timestamp_pretty", "mmsi", "diff_time_seconds"), row.names = c(NA,
-20L), class = c("data.table", "data.frame"), .internal.selfref = "<pointer: 0x00000000001e0788>", sorted = "mmsi")
data
