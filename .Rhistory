<<<<<<< HEAD
library(sandwich)
install.packages("latex2exp")
library(ggmap)
library(ggplot2)
library(map)
library(mapdata)
world.wire <- map_data("world2")
ggplot() + geom_polygon(data = world.wire, aes(x=long, y = lat, group =   group), color="white", fill="grey40") +
coord_map(projection = "stereographic", ylim =c(30,60), xlim=c(-20,20))
library(ggmap)
install.packages("ggmap")
library(ggmap)
library(ggplot2)
library(map)
install.packages("map")
library(mapdata)
get_map("Europe")
world.wire <- get_map("Europe")
ggplot() + geom_polygon(data = world.wire, aes(x=long, y = lat, group =   group), color="white", fill="grey40") +
coord_map(projection = "stereographic", ylim =c(30,60), xlim=c(-20,20))
world.wire <- get_map("World")
ggplot() + geom_polygon(data = world.wire, aes(x=long, y = lat, group =   group),
color="white", fill="grey40")
?get_map
ggmap(world.wire)
world.wire <- get_map("World2")
library(ggmap)
ggmap(world.wire)
ggmap(world.wire, fullpage=T)
ggmap(world.wire, extend=T)
2025/(1+0.07)^1 + 2025/(1+0.07)^2 + 2025/(1+0.07)^3 + 2025/(1+0.07)^4 + 2025/(1+0.07)^5
400/(1+0.07)^1 + 400/(1+0.07)^2 + 400/(1+0.07)^3 + 400/(1+0.07)^4 + 400/(1+0.07)^5
library(data.table)
a<-fread("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data",sep=",")
dim(a)
names(a)<-c("sex","length","diameter","height","wweight","shucked weight","viscera Weight","shell weight","rings")
g<-ggplot(data = a,aes(wweight,rings))
library(ggplot2)
g<-ggplot(data = a,aes(wweight,rings))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data = a,aes(shucked weight,rings))
names(a)<-c("sex","length","diameter","height","wweight","shucked_weight","viscera_Weight","shell_weight","rings")
g<-ggplot(data = a,aes(wweight,rings))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data = a,aes(shucked weight,rings))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data = a,aes(wweight,rings))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data = a,aes(shucked_weight,rings))
g+geom_point()+geom_smooth(method="lm")
g<-ggplot(data = a,aes(shucked_weight,rings))
g+geom_point()+geom_smooth(method="lm")
library(data.table)
a<-fread("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data",sep=",")
dim(a)
names(a)<-c("sex","length","diameter","height","wholeweight","shuckedweight","visceraweight","shellweight","rings")
head(a)
summary(a$rings)
unique(a$rings)
ggplot(mtcars aes(x=cyl, y=mpg))
ggplot(mtcars, aes(x=cyl, y=mpg))
library(ggplot2)
ggplot(mtcars, aes(x=cyl, y=mpg))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point()
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() + ylab(expression(paste("The", italic("alpha"),"-male percentage"))
)
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
theme(ylab(expression(paste("The", italic("alpha"),"-male percentage"))))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(paste("The", italic("alpha"),"-male percentage")))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(paste("The ", italic("alpha"),"-male percentage")))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(atop("The ", italic("alpha"),"-male percentage")))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(atop("The " italic("alpha") "-male percentage")))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(atop("The ", italic("alpha") "-male percentage")))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(atop("The ", italic("alpha"), "-male percentage")))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(atop("The ""," italic("alpha"), "-male percentage")))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(atop("The ","," italic("alpha"), "-male percentage")))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(atop("The "',' italic("alpha"), "-male percentage")))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(atop("The "italic("alpha"), "-male percentage")))
ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point() +
ylab(expression(atop("The ",italic("alpha"), "-male percentage")))
ln(1)
log(1-2)
log(1) - log(2)
library(ggplot2)
unemp <- qplot(date, unemploy, data=economics, geom="line", xlab = "", ylab = "No. unemployed (1000s)")
unemp
nemp <- qplot(date, unemploy, data=economics, geom="line", xlab = "", ylab = "No. unemployed (1000s)")
yrng <- range(economics$unemploy)
xrng <- range(economics$date)
unemp + geom_vline(aes(xintercept = start), data = presidential)
unemp + geom_rect(aes(NULL, NULL, xmin = start, xmax = end, fill = party), ymin = yrng[1], ymax = yrng[2], data = presidential) + scale_fill_manual(values = alpha(c("blue", "red"), 0.2))
nemp <- qplot(date, unemploy, data=economics, geom="line", xlab = "", ylab = "No. unemployed (1000s)")
yrng <- range(economics$unemploy)
xrng <- range(economics$date)
unemp + geom_vline(aes(xintercept = start), data = presidential)
yrng
xrng
nemp <- qplot(date, unemploy, data=economics, geom="line", xlab = "", ylab = "No. unemployed (1000s)")
yrng <- range(economics$unemploy)
xrng <- range(economics$date)
unemp + geom_vline(aes(xintercept = start), data = presidential)
unemp + geom_rect(aes(NULL, NULL, xmin = xrng[1], xmax = xrng[2], fill = party),
ymin = yrng[1], ymax = yrng[2], data = presidential) +
scale_fill_manual(values = alpha(c("blue", "red"), 0.2))
xrng <- range(economics$date)
unemp + geom_vline(aes(xintercept = start), data = presidential)
unemp + geom_rect(aes(NULL, NULL, fill = party),
ymin = yrng[1], ymax = yrng[2], data = presidential) +
scale_fill_manual(values = alpha(c("blue", "red"), 0.2))
sessionInfo()
=======
x <- runif(500, min = 0, max = 20)
y <- -2 + 3.5*x + rnorm(500, sd = 5)
population <- data.frame(x, y)
fit <- matrix(ncol = 2, nrow = 100)
for (i in 1:100){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
[i, ]
fit
plot(fit[ ,1])
hist(fit[ ,1])
density(fit[ ,1])
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 200)
for (i in 1:200){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
plot(density(fit[ ,2]))
x <- runif(500, min = 0, max = 20)
u <- rnorm(500, sd = 5)
y <- -2 + 3.5*x
population <- data.frame(x, y)
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
var((x-mean(x))*u)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 5)
y <- -2 + 3.5*x
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
sigma_b1
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:n, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
fit[ ,2]
fit
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 5)
y <- -2 + 3.5*x
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
fit[ ,2]
fit
1:n
population[ sample(1:n, 20), ]
random_sample  <- population[ sample(1:n, 20), ]
lm(y ~ x, data= random_sample)$coefficients
random_sample
lm(y ~ x, data= random_sample)$coefficients
random_sample
lm(y ~ x, data = random_sample)
random_sample
random_sample  <- population[ sample(1:n, 20), ]
random_sample
fit[i, ]       <- lm(random_sample$y ~ x, data = random_sample)$coefficients
fit[i, ]
lm(random_sample$y ~ random_sample$x, data = random_sample)$coefficients
random_sample
random_sample$y
random_sample$x
lm(random_sample$y ~ random_sample$x, data = random_sample)$coefficients
lm(random_sample$y ~ random_sample$x, data = random_sample)$coefficients
random_sample  <- population[ sample(1:n, 20), ]
lm(random_sample$y ~ random_sample$x, data = random_sample)$coefficients
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 50)
y <- -2 + 3.5*x
population <- data.frame(x, y)
random_sample  <- population[ sample(1:n, 20), ]
lm(random_sample$y ~ random_sample$x, data = random_sample)$coefficients
lm(random_sample$y ~ random_sample$x, data = random_sample)
summary(lm(random_sample$y ~ random_sample$x, data = random_sample))
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 10)
y <- -2 + 3.5*x + u
population <- data.frame(x, y)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 20), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
fit
fit[ ,2]
var(fit[ ,2])
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
sigma_b1
fit[ ,2]
var(fit[ ,2])
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 10)
y <- -2 + 3.5*x + u
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 20), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
var(fit[ ,2])
var((x-mean(x))*u) / (n * var(x)^2)
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 10)
y <- -2 + 3.5*x + u
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 50), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
var(fit[ ,2])
var(fit[ ,2])
var((x-mean(x))*u) / (n * var(x)^2)
n <- 1000
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 10)
y <- -2 + 3.5*x + u
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 1000), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
var(fit[ ,2])
var((x-mean(x))*u) / (n * var(x)^2)
n <- 1000
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 10)
y <- -2 + 3.5*x + u
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 100), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
var(fit[ ,2])
var(fit[ ,2])
var((x-mean(x))*u) / (n * var(x)^2)
var( ( x - mean(x) ) * u )
var(x)^2
(n * var(x)^2)
n * var(x)^2
sigma_b1 <- var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
sigma_b1
var(fit[ ,2])
pop_n <- 1000
x     <- runif(pop_n, min = 0, max = 20)
u     <- rnorm(pop_n, sd = 10)
y     <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
sigma_b1 <- var( ( x - mean(x) ) * u ) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, n), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
var(fit[ ,2])
var( ( x - mean(x) ) * u ) / (n * var(x)^2)
var( ( x - mean(x) ) * u ) / (n * var(x)^2)
sigma_b1 <- var( ( x - mean(x) ) * u ) / (pop_n * var(x)^2)
sigma_b1
var(fit[ ,2])
pop_n <- 1000
x     <- runif(pop_n, min = 0, max = 20)
u     <- rnorm(pop_n, sd = 10)
y     <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
sigma_b1 <- var( ( x - mean(x) ) * u ) / (pop_n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, n), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
sigma_b1
var(fit[ ,2])
lm(y ~ x, data = random_sample)$coefficients
var(fit[ ,2])
var(fit[ ,2])
var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
hist(fit[ ,2])
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
sigma_b1 <- var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, n), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
fit
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
random_sample  <- population[ sample(1:n, n), ]
random_sample
lm(y ~ x, data = random_sample)$coefficients
random_sample  <- population[ sample(1:n, n), ]
lm(y ~ x, data = random_sample)$coefficients
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
sigma_b1 <- var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:pop_n, n), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
hist(fit[ ,2])
var(fit[ ,2])
var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
1 - (mean(x) / mean(x^2) * x
1 - mean(x) / mean(x^2) * x
1 - mean(x) / mean(x^2) * x
H_i      <- 1 - mean(x) / mean(x^2) * x
sigma_b0 <- var(H_i * u) / (n * mean(H_i^2)^2 )
sigma_b0
hist(fit[ ,1])
var(fit[ ,1])
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
mean(x^2)
x          <- runif(pop_n, min = 0, max = 1)
mean(x^2)
20^3 /60
x          <- runif(pop_n, min = 0, max = 20)
mean(x^2)
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
mean(x^2)
library(xtable)
df <- data.frame(cbind(c("a", "b"), c("$\\sin\\theta$", "$\\cos\\theta$")))
xtable(df, type="html")
xtable(df, type="html")
print(xtable(df), type="html", hline.after = NULL, sanitize.text.function=function(x){x})
print(xtable(df), hline.after = NULL, sanitize.text.function=function(x){x})
print(xtable(df), type=table_type, hline.after = NULL, sanitize.text.function=function(x){x})
table_type <- "html"
print(xtable(df), type=table_type, hline.after = NULL, sanitize.text.function=function(x){x})
print(xtable(df), type=table_type, hline.after = NULL, sanitize.text.function=function(x){x})
$$\sigma^2_\hat{\beta_1} = \frac{1}{n} \frac{var \left[ \left(X_i - \mu_X \right) u_i  \right]}
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
sigma_b1 <- var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
H_i      <- 1 - mean(x) / mean(x^2) * x
sigma_b0 <- var(H_i * u) / (n * mean(H_i^2)^2 )
number_of_estimations <- 500
fit <- matrix(ncol = 2, nrow = number_of_estimations)
for (i in 1:number_of_estimations){
random_sample  <- population[ sample(1:pop_n, n), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
fit
var(fit[ ,1])
hist(fit[ ,1])
var(fit[ ,2])
hist(fit[ ,2])
sigma_b1
sigma_b0
(fit[ ,1])
var(fit[ ,1])
sigma_b1 <- var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
sigma_b1
var(fit[ ,2])
var(fit[ ,1])
sigma_b0
fit
var(fit)
hist(fit[ ,1], main = "Histogram of the estimates of expression($\beta_1$)")
hist(fit[ ,1], main = "Histogram of the estimates of expression($\\beta_1$)")
expression($\\beta_1$)
hist(fit[ ,1], main = paste0("Histogram of the estimates of", expression($\\beta_1$))
hist(fit[ ,1], main = paste0("Histogram of the estimates of", expression(\\beta_1))
hist(fit[ ,1], main = paste0("Histogram of the estimates of", expression("\\beta_1)")
hist(fit[ ,1], main = paste0("Histogram of the estimates of", expression("\\beta_1")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", latex2exp("\\beta_1")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", TeX("\\beta_1")))
library(latex2exp)
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", TeX("\\beta_1")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", TeX("$\\beta_1$")))
latex2exp("$\\beta_1$")
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", latex2exp("$\\beta_1$")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", Tex("$\\beta_1$")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", Tex("$\\beta_1$")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(label = "beat[i]")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(label = "beata[i]")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(label = "beta[i]")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(label = beta[i])))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(label = \\beta[i])))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(beta[i])))
hist(fit[ ,1], main = "Histogram of the estimates of ", expression(beta[i]))
hist(fit[ ,1], main = expression(beta[i]))
hist(fit[ ,1], main = expression(aba beta[i]))
hist(fit[ ,1], main = expression(a ,beta[i]))
hist(fit[ ,1], main = bquote(beta[i]))
hist(fit[ ,1], main = bquote(a, beta[i]))
hist(fit[ ,1], main = bquote("a", beta[i]))
hist(fit[ ,1], main = bquote(a ~ beta[i]))
hist(fit[ ,1], main = bquote(The distribution of ~ beta[i]))
hist(fit[ ,1], main = bquote(The ~ distribution  ~ of ~ beta[i]))
hist(fit[ ,1], main = bquote(The ~ distribution  ~ of ~ 500 ~ beta[1] ~ estimates))
hist(fit[ ,2], , main = bquote(The ~ distribution  ~ of ~ 500 ~ beta[2] ~ estimates))
=======
install.packages("highr")
library(devtools)
devtools::install_github("rstudio/rmarkdown")
install.packages("AER")
install.packages("lmtest")
installed.packages()
install.packages("Rcpp")
detach("rcpp")
detach(rcpp)
library("Rcpp", lib.loc="\\\\Wiwinf-file01/Home/alexander.gerber/Eigene Dateien/R/R-3.3.0/library")
detach("package:Rcpp", unload=TRUE)
library("Rcpp", lib.loc="\\\\Wiwinf-file01/Home/alexander.gerber/Eigene Dateien/R/R-3.3.0/library")
detach("package:Rcpp", unload=TRUE)
install.packages("Rcpp")
path.package()
linPaths()
libPaths()
>>>>>>> edd2dfc57be378aa395bd510efe4ee1000073759
.libPaths()
install.packages("car")
install.packages("car")
.libPaths
.libPaths()
<<<<<<< HEAD
install.packages("ggvis")
library(ggvis)
library(dplyr)
set.seed(123)
x     <- sort(runif(15, min = 30, max = 70 ))
y     <- rnorm(15 , mean = 200, sd = 50)
df    <- data.frame(y, x)
v <- input_slider(0, 250, value = 0, step = 25, animate = TRUE)
outlier <- function(y, v) y + c(rep(0, 14), v)
df %>%
ggvis(x = ~x, y = ~y)  %>%
mutate(y = outlier(y, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y ~ x)
install.packages("rmarkdown")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 2
library(dplyr, quietly=T)
# Read in CPS data (taken from http:// ....)
cps_dat <- read.csv("data/cps_ch3.csv", sep=";", dec=".")
# Get an overview of the data structure
head(cps_dat)
# Take cps_dat %>% group data by gender and year %>% compute the mean, standard deviation
# and number of observations for each group
avgs <- cps_dat %>% group_by(a_sex, year) %>% summarise(mean(ahe12), sd(ahe12), n())
print(avgs, digits=2)
# Chunk 3
male   <- avgs %>% filter(a_sex == 1)
female <- avgs %>% filter(a_sex == 2)
colnames(male)   <- c("Sex", "Year", "Y_bar_m", "s_m", "n_m")
colnames(female) <- c("Sex", "Year", "Y_bar_f", "s_f", "n_f")
# Gender gap, standard errors and confidence intervals
gap      <- male$Y_bar_m - female$Y_bar_f
gap_se   <- sqrt(male$s_m^2 / male$n_m + female$s_f^2 / female$n_f)
gap_ci_l <- gap - 1.96 * gap_se
gap_ci_u <- gap + 1.96 * gap_se
result <- cbind(male[,-1], female[,-(1:2)], gap, gap_se, gap_ci_l, gap_ci_u)
print(result, digits = 2)
# Chunk 4
class_data <- data.frame(TestScore           = c(680, 640, 670, 660, 630, 660, 635),
StudentTeacherRatio = c(15, 17, 19, 20, 22, 23.5, 25)
)
class_data
# Chunk 5
plot(TestScore ~ StudentTeacherRatio, data = class_data, ylim = c(600, 700), xlim = c(10,30))
abline(a = 713, b = -3)
# Chunk 6
library(AER)                                                    # contains the dataset
data(CASchools)
# Chunk 7
head(CASchools)
# Chunk 8
CASchools$tsratio  <- CASchools$students/CASchools$teachers     # teacher-student-ratio
CASchools$score    <- (CASchools$read + CASchools$math)/2       # average test-score
# Chunk 9: Table 4.1
avg_tsratio   <- mean(CASchools$tsratio)
avg_score     <- mean(CASchools$score)
sd_tsratio    <- sd(CASchools$tsratio)
sd_tsratio    <- sd(CASchools$score)
quantiles     <- c(0.10, 0.25, 0.4, 0.5, 0.6, 0.75, 0.9)
quant_tsratio <- quantile(CASchools$tsratio, quantiles)
quant_score   <- quantile(CASchools$score, quantiles)
#Gather everything in a data frame
DistributionSummary <- data.frame(Average           = c(avg_tsratio, avg_tsratio),
StandardDeviation = c(sd_tsratio, sd_tsratio),
quantile          = rbind(quant_tsratio, quant_score)
)
DistributionSummary
# Chunk 10: Figure 4.2
cor(CASchools$tsratio, CASchools$score)
plot(score ~ tsratio,
data = CASchools,
main = "Scatterplot of Test Score vs. Student-Teacher Ratio",
xlab = "Student teacher-ratio (X)",
ylab = "Test Score (Y)",
xlim = c(10,30),
ylim = c(600, 720))
# Chunk 11
attach(CASchools)
beta_1 <- sum((tsratio - mean(tsratio))*(score - mean(score))) / sum((tsratio - mean(tsratio))^2)
beta_0 <- mean(score) - beta_1 * mean(tsratio)
beta_1
beta_0
# Chunk 12
plot(score ~ tsratio,
data = CASchools,
main = "Scatterplot of Test Score vs. Student-Teacher Ratio",
xlab = "Student teacher-ratio (X)",
ylab = "Test Score (Y)",
xlim = c(10,30),
ylim = c(600, 720))
abline(a = beta_0, b = beta_1) # add regression line
# Chunk 13
linear_model <- lm(score ~ tsratio, data = CASchools)
linear_model
plot(score ~ tsratio,
data = CASchools,
main = "Scatterplot of Test Score vs. Student-Teacher Ratio",
xlab = "Student teacher-ratio (X)",
ylab = "Test Score (Y)",
xlim = c(10,30),
ylim = c(600, 720))
abline(linear_model)
detach("package:AER", unload=TRUE)
detach("package:car", unload=TRUE)
install.packages("tmap")
install.packages("gtable")
install.packages("data.table")
install.packages(c("curl", "devtools", "dplyr", "geosphere", "git2r", "httr", "jsonlite", "lazyeval", "mime", "openssl", "plyr", "quantreg", "raster", "Rcpp", "rmarkdown", "rstudioapi", "rvest", "spdep", "stringi", "tidyr", "withr", "xml2"))

=======
library(devtools)
install_github("datacamp/tutorial")
install.packages("AER" ,lib = "C:/Users/Alexander.Gerber/Dropbox/R/Library")
.libPaths()
dropbox <- "C:/Users/Alexander.Gerber/Dropbox/R/Library"
.libPaths(c(.libPaths(), dropbox))
.libPaths()
library(devtools)
install_github("datacamp/tutorial", lib = dropbox)
.libPaths()
a <- .libPaths()
a
.libPaths(dropbox)
install_github("datacamp/tutorial", lib = dropbox)
.libPaths()
dropbox
.libPaths(dropbox)
.libPaths()
with_libpaths(dropbox, install_github("datacamp/tutorial"))
with_libpaths(new = dropbox, install_github("datacamp/tutorial"))
with_libpaths(new = dropbox, install_github("datacamp/tutorial"))
withr::with_libpaths(new = dropbox, install_github("datacamp/tutorial"))
install_github("datacamp/tutorial")
.libPaths() <- "C:/Users/Alexander.Gerber/Dropbox/R/Library"
.libPaths()
.libPaths()[1]
.libPaths()[2] <- NULL
.libPaths()[2]
.libPaths()[2] <- 1
.libPaths(NULL)[2]
.libPaths()[2]
.libPaths(dropbox)
.libPaths
.libPaths()
withr::with_libpaths(new = dropbox, install_github("datacamp/tutorial"))
withr::with_libpaths(new = dropbox, install_github("datacamp/tutorial"))
.libPaths()
dropbox <- "C:/Users/Alexander.Gerber/Dropbox/R/Library"
.libPaths(c(.libPaths(), dropbox))
.libPaths()
.libPaths(dropbox)
.libPaths()
install.packages("AER")
install.packages("devtools")
library(devtools)
install_github("datacamp/tutorial")
install_github("datacamp/tutorial")
install.packages("curl")
library(devtools)
install_github("datacamp/tutorial")
install.packages("curl")
install_github("datacamp/tutorial")
install.packages("curl")
install.packages("C:/Users/OEK-admin/AppData/Local/Temp/RtmpshJGJJ/downloaded_packages/curl_0.9.7.zip", repos = NULL, type = "win.binary")
library(devtools)
install_github("datacamp/tutorial")
data.frame(TestScore = c(680, 640, 670, 660, 630, 660, 635), Student-teacher-ratio = c(15, 17, 19, 20, 22, 23,5, 25) )
Student-teacher-ratio = c(15, 17, 19, 20, 22, 23,5, 25)
data.frame(TestScore = c(680, 640, 670, 660, 630, 660, 635), StudentTeacherRatio = c(15, 17, 19, 20, 22, 23,5, 25) )
Raito_Score <- data.frame(TestScore = c(680, 640, 670, 660, 630, 660, 635), StudentTeacherRatio = c(15, 17, 19, 20, 22, 23.5, 25))
Raito_Score <- data.frame(TestScore = c(680, 640, 670, 660, 630, 660, 635), StudentTeacherRatio = c(15, 17, 19, 20, 22, 23.5, 25))
plot(TestScore ~ StuentTeacherRatio, data = Ratio_Score)
Ratio_Score
Raito_Score
Raito_Score
Raito_Score
Raito_Score
plot(TestScore ~ StuentTeacherRatio, data = Raito_Score)
plot(TestScore ~ StudentTeacherRatio, data = Raito_Score)
plot(TestScore ~ StudentTeacherRatio, data = Raito_Score, xlim = c(600, 700))
plot(TestScore ~ StudentTeacherRatio, data = Raito_Score, ylim = c(600, 700))
plot(TestScore ~ StudentTeacherRatio, data = Raito_Score, ylim = c(600, 700), xlim = c(10,30))
lm(TestScore ~ StudentTeacherRatio, data = Raito_Score)
lm_model <- lm(TestScore ~ StudentTeacherRatio, data = Raito_Score)
abline(lm_model)
