set.seed(123)
x     <- round(runif(25,10,20),0)
z     <- round(rnorm(25, 0, 1) + 0.5 * x, 0)
y1    <- x + rnorm(25)
y2     <- x + z + rnorm(25)
fit2 <- lm(y2 ~ x)
fit3 <- lm(y2 ~ x + z)
plot(y2 ~ x, pch=19, col="blue", ylim=c(min(y1), max(y2)))
abline(a=coef(fit1), col="blue")
plot(y2 ~ x, pch=19, col="blue", ylim=c(min(y1), max(y2)))
abline(coef(fit2), col="red")
abline(coef(fit3)[1:2], col="green")
z2     <- round(rnorm(25, 0, 1) + 0 * x, 0)
y3     <- x + z + rnorm(25)
fit4 <- lm(y2 ~ x + z)
fit4 <- lm(y2 ~ x + z2)
abline(coef(fit4)[1:2], col="yellow")
v <- input_slider(-1, 1, value = 0, step = 20, animate = TRUE)
z <- function(z, v) z + v * x
plot(y2 ~ x, pch=19, col="blue", ylim=c(min(y1), max(y2)))
df <- data.frame(y2 = y2, x = x, z=z)
newZ <- function(z, v) z + v * x
z     <- round(rnorm(25, 0, 1) + 0.5 * x, 0)
z     <- round(rnorm(25, 0, 1) + 0 * x, 0)
z2     <- round(rnorm(25, 0, 1) + 0 * x, 0)
newZ <- function(z, v) z + v * x
df <- data.frame(y2 = y2, x = x, z=z)
mutate(y = newZ(y, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y ~ x)
layer_model_predictions(model  = "lm", formula = y2 ~ x)
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(y = newZ(y, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x)
v <- input_slider(-1, 1, value = 0, step = 20, animate = TRUE)
newZ <- function(z, v) z + v * x
df <- data.frame(y2 = y2, x = x, z=z)
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(y = newZ(y, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x)
plot(y2 ~ x, pch=19, col="blue", ylim=c(min(y1), max(y2)))
abline(coef(fit2), col="red")
abline(coef(fit3)[1:2], col="green")
abline(coef(fit4)[1:2], col="yellow")
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(z = newZ(y, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x + z)
newZ <- function(z, v) z + v * x
fit2 <- lm(y2 ~ x)
fit3 <- lm(y2 ~ x + z)
fit4 <- lm(y2 ~ x + z2)
df <- data.frame(y2 = y2, x = x, z=z)
plot(x)df
df
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(z = newZ(z, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x + z)
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(z = newZ(z, eval(v))) %>%
layer_points()# %>%
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(z = newZ(z, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x)
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(z = newZ(z, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x) %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x + z)
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(z = newZ(z, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x) %>%
layer_paths("x" = x, "y" = fitted(lm(y2 ~ x + z))
)
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(z = newZ(z, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x) %>%
layer_paths("x" = x, "y" = fitted(lm(y2 ~ x + z)))
layer_paths(property="x", x= x, "y" = fitted(lm(y2 ~ x + z)))
layer_paths(prop(property="x", x=x), prop(property = "y", x = fitted(lm(y2 ~ x + z))))
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(z = newZ(z, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x) %>%
layer_paths(prop(property="x", x=x), prop(property = "y", x = fitted(lm(y2 ~ x + z))))
layer_paths(prop(property ="x", x=x), prop(property = "y", x = fitted(lm(y2 ~ x + z))))
df %>%
ggvis(x = ~x, y = ~y2)  %>%
mutate(z = newZ(z, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y2 ~ x) %>%
layer_paths(prop(property ="x", x=x), prop(property = "y", x = fitted(lm(y2 ~ x + z))))
mtcars
lm(mtcars$mpg ~mtcars$wt)
plot(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, x=mtcars$wt)
plot(y=mtcars$mpg, x=mtcars$wt)
plot(y=mtcars$mpg, x=mtcars$cyl)
plot(y=mtcars$mpg, x=mtcars$disp)
plot(y=mtcars$mpg, x=mtcars$hp)
??datasets
?dataset
??dataset
library(help = "datasets")
Orange
PlantGrowth
airquality
x <- runif(100, 10, 50)
x
y <- x + x/10 * rnorm(100)
lm(y~x)
plot(y=y,x=x)
abline(coef(lm(y~x)))
y <- x + rnorm(100, 0,  x/10)
plot(y=y,x=x)
abline(coef(lm(y~x)))
x2 <- rnorm(100) * x
y <- x + x2 + rnorm(100)
plot(y=y,x=x)
abline(coef(lm(y~x)))
fir1 <- lm(y~x)
plot(y=y,x=x)
abline(coef(fit1))
qqnorm(fit1$residuals)
qqline(fit1$residuals)
y <- x + x2 + rnorm(100)
fit1 <- lm(y~x)
plot(y=y,x=x)
abline(coef(fit1))
qqnorm(fit1$residuals)
qqline(fit1$residuals)
fit2 <- lm(y~x + x2)
plot(y=y,x=x)
abline(coef(fit1))
qqnorm(fit1$residuals)
qqline(fit1$residuals)
fit1 <- lm(y~x)
fit2 <- lm(y~x + x2)
par(mfrow=c(1,2))
plot(y=y,x=x)
abline(coef(fit1))
qqnorm(fit1$residuals)
qqline(fit1$residuals)
qqnorm(fit1$residuals)
qqline(fit1$residuals)
qqnorm(fit2$residuals)
qqline(fit2$residuals)
x2 <- rnorm(100, 0 , 5) * x
y <- x + x2 + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~x + x2)
par(mfrow=c(1,2))
plot(y=y,x=x)
abline(coef(fit1))
qqnorm(fit1$residuals)
qqline(fit1$residuals)
qqnorm(fit2$residuals)
qqline(fit2$residuals)
qqnorm(fit1$residuals)
qqline(fit1$residuals)
qqnorm(fit1$residuals)
qqline(fit1$residuals)
qqnorm(fit2$residuals)
qqline(fit2$residuals)
CASchools
CASchools
?CASchools
??CASchools
library(AER)
attach(CASchools)
names(CASchools)
CASchools$PctES    <- 100 - CASchools$english
model2 <- lm(score ~ tsratio + PctES)
qqplot(model1)
model1 <- lm(score ~ tsratio)
model2 <- lm(score ~ tsratio + PctES)
qqplot(model1)
model1 <- lm(score ~ tsratio)
model1
model2 <- lm(score ~ tsratio + PctES)
qqplot(model1)
qqnorm(model1)
qqnorm(model1)
model1 <- lm(score ~ tsratio)
model2 <- lm(score ~ tsratio + PctES)
qqnorm(model1)
qqnorm(model1$residuals)
qqline(model1$residuals)
qqnorm(model2$residuals)
qqline(model2$residuals)
x <- runif(100, 0, 100)
x
runif(1, -1, 1)
runif(1, -1, 1)
runif(1, -1, 1)
runif(1, -1, 1)
runif(1, -1, 1)
runif(1, -1, 1)
runif(1, -1, 1)
runif(1, -1, 1)
runif(1, -1, 1)
runif(1, -1, 1)
x <- runif(1, -1, 1) * z
corr(x,z)
cor(x,z)
cor(x,z)
x <- runif(1, -1, 1) * z
cor(x,z)
x <- runif(1, -1, 1) * z + rnorm(100)
cor(x,z)
x
z
z <- runif(100, 0, 100)
x <- runif(1, -1, 1) * z + rnorm(100)
cor(x,z)
x <- runif(1, -1, 1) * z + rnorm(100)
cor(x,z)
x <- runif(1, -1, 1) * z + rnorm(100)
cor(x,z)
x <- runif(1, -1, 1) * z + rnorm(100)
cor(x,z)
x <- runif(1, -1, 1) * z + rnorm(100)
cor(x,z)
x <- runif(1, -1, 1) * z + rnorm(100)
cor(x,z)
x <- runif(1, -1, 1) * z + rnorm(100)
cor(x,z)
x <- runif(100, -1, 1) * z + rnorm(100)
cor(x,z)
x <- runif(100, -1, 1) * z
cor(x,z)
x <- (runif(1, -1, 1) + rnorm(100)) * z
cor(x,z)
x <- (runif(1, -1, 1) + rnorm(100)) * z
cor(x,z)
x <- (runif(1, -1, 1) + rnorm(100)) * z
cor(x,z)
x <- (runif(1, -1, 1) + rnorm(100)) * z
cor(x,z)
x <- (runif(1, -1, 1) + rnorm(100)) * z
cor(x,z)
x <- (runif(1, -1, 1) + rnorm(100)) * z
cor(x,z)
x <- (runif(1, -1, 1) + rnorm(100)) * z
cor(x,z)
fit1 <- lm(y~x)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
x <- (0.5 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
par(mfrow=c(1,1))
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0.5 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0.5 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0.5 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0.5 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0.5 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0.5 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- (0 + rnorm(100)) * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- 0 * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- 1 * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
z <- runif(100, 0, 100)
x <- 0.5 * z
cor(x,z)
y <- x + z + rnorm(100)
fit1 <- lm(y~x)
fit2 <- lm(y~ x + z)
fit1
fit2
plot(y=y,x=x)
abline(coef(fit1))
abline(coef(fit2)[1:2])
library(AER)                                                    # contains the dataset
data(CASchools)
CASchools$tsratio  <- CASchools$students/CASchools$teachers     # teacher-student-ratio
CASchools$score    <- (CASchools$read + CASchools$math)/2       # average test-score
model <- lm(score ~ tsratio + english, data = CASchools)
summary(model)
CASchools
names(CASchools)
library(AER)                                                    # contains the dataset
data(CASchools)
CASchools$tsratio  <- CASchools$students/CASchools$teachers     # teacher-student-ratio
CASchools$score    <- (CASchools$read + CASchools$math)/2       # average test-score
model <- lm(score ~ tsratio + english , data = CASchools)
summary(model)
X <- matrix(rep(1, nrow(CASchools)))
X
X <- cbind(rep(1, nrow(CASchools)), CASchools$tsratio, CASchools$english)
X
X <- cbind(rep(1, nrow(CASchools)), CASchools$tsratio, CASchools$english)
y <- CASchools$score
beta <- solve(t(X)%*%X) %*% t(X) %*% y
beta
n <- nrow(CASchools)
z <- sum((X[,1]-mean(X[,1]))^2)
residuals(model)
ä  <- sum((X[,1]-mean(X[,1]))^2*residuals(model)^2)
(1/n) * ((1/(n-2))*ä) / ( (1/n)*z  )^2
(1/n) * (((1/(n-2))*ä) / ( (1/n)*z  )^2)
ä
X[,1]-mean(X[,1])
X[,1]-mean(X[,1])
z  <- sum((X[,2]-mean(X[,2]))^2)
ä  <- sum((X[,2]-mean(X[,2]))^2*residuals(model)^2)
z
ä
(1/n) * (((1/(n-2))*ä) / ( (1/n)*z  )^2)
summary(model)
sqrt((1/n) * (((1/(n-2))*ä) / ( (1/n)*z  )^2) )
z  <- sum((X[,3]-mean(X[,3]))^2)
ä  <- sum((X[,3]-mean(X[,3]))^2*residuals(model)^2)
(1/n) * (((1/(n-2))*ä) / ( (1/n)*z  )^2)
sqrt ( (1/n) * (((1/(n-2))*ä) / ( (1/n)*z  )^2) )
diag(t(X)%*%X)
diag(var(residuals(model))*solve(t(X)%*%X))
sqrt(diag(var(residuals(model))*solve(t(X)%*%X)))
sqrt(diag(var(residuals(model))*(419/420)*solve(t(X)%*%X)))
sqrt(diag(var(residuals(model))*(420/419)*solve(t(X)%*%X)))
summary(model)
sqrt(diag(var(residuals(model))*solve(t(X)%*%X)))
sqrt(diag(var(residuals(model))*(419/420)*solve(t(X)%*%X)))
lm.fit
coeftest(model, vcov = vcovHC(model, "HC1")
)
se(model)
coef(model)
vcov(model)
summary(model)
x <- 1
y <- 2
name(max(x,y))
names(max(x,y))
max(x,y)
as.name(x)
as.name(y)
get(y)
substitute(x)
substitute(y)
substitute(max(x,y))
which.max(x,y)
which.max(x)
which.max(y)
u <- 1:5
which.max(u)
u <- 10:15
which.max(u)
T <- c("x" = 1, "y"=2, "z"=3)
T
which.max(T)
names(which.max(T))
