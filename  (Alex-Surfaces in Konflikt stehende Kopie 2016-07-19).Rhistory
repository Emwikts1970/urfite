df <- data.frame(df1, val1, val2)
names(df) <- c("aa", "bb", "val1", "val2")
melt(df,  id.vars = c("val1","val2"))
new_df$id <- paste0(new_df$variable, new_df$value)
ggplot(new_df, aes(x = value, y = aa, color = id)) + geom_line()
new_df
aa <- c(1:7)
bb <- c(11:15)
df1 <- expand.grid(aa, bb)
val1 <- rnorm(nrow(df1))
val2 <- runif(nrow(df1))
df <- data.frame(df1, val1, val2)
names(df) <- c("aa", "bb", "val1", "val2")
library(reshape2)
library(ggplot2)
new_df<- melt(df,  id.vars = c("val1","val2"))
new_df
new_df$value
new_df$variable
paste0(new_df$variable, new_df$value)
new_df$id <- paste0(new_df$variable, new_df$value)
new_df, aes(x = value, y = aa, color = id)
new_df
new_df[ ,c(1,2,5)]
new_df[ ,c(1,2,5)]
aa <- c(1:7)
bb <- c(11:15)
df1 <- expand.grid(aa, bb)
val1 <- rnorm(nrow(df1))
val2 <- runif(nrow(df1))
df <- data.frame(df1, val1, val2)
names(df) <- c("aa", "bb", "val1", "val2")
df
df <- read.table(text = "required_value          Value1          Value2        Value3
0.5                  0.1              0.3           0.4
1.0                   1              0.7           0.2
1.5                  0.37             0.3           0.7
2.0                  1.25            0.9           1.9", header = TRUE)
pmax(df)
do.call(df, pmax)
do.call(pmax, df)
do.call(pmin, df)
do.call(pmin, (df[-1]-df[1])
do.call(pmin, (df[-1]-df[1]))
df[-1]-df[1]
sum
runif(15, min = 30, max = 70 )
set.seed(123)
runif(15, min = 30, max = 70 )
x <- sort(runif(15, min = 30, max = 70 ))
x
rnorm(15 ,mean = 200)
x     <- sort(runif(15, min = 30, max = 70 ))
y     <- rnorm(15 ,mean = 200)
y[12] <- 2000
plot(y ~ y)
plot(y ~ x)
rnorm(15 , mean = 200, sd = 5)
set.seed(123)
x     <- sort(runif(15, min = 30, max = 70 ))
y     <- rnorm(15 , mean = 200, sd = 5)
y[12] <- 2000
plot(y ~ x)
x     <- sort(runif(15, min = 30, max = 70 ))
y     <- rnorm(15 , mean = 200, sd = 50)
y[12] <- 2000
plot(y ~ x)
set.seed(123)
x     <- sort(runif(15, min = 30, max = 70 ))
y     <- rnorm(15 , mean = 200, sd = 50)
y[12] <- 2000
plot(y ~ x)
lm(y[-12] ~ x[-12])
abline(fit)
abline(fitWithoutOutlier)
fit               <- lm(y ~ x)
fitWithoutOutlier <- lm(y[-12] ~ x[-12])
plot(y ~ x)
abline(fit)
abline(fitWithoutOutlier)
x <- runif(500, min = 0, max = 100)
y <- -2 + 3.5*x + rnorm(500, sd =5)
plot(x,y)
x <- runif(500, min = 0, max = 20)
y <- -2 + 3.5*x + rnorm(500, sd =5)
plot(x,y)
population <- data.frame(x, y)
population
sample(20, 1:500)
sample(1:500, 20)
random_sample  <- population[ sample(1:500, 20), ]
random_sample
fit <- lm(y ~ x, data= random_sample)
fit$coefficients
fit <- matrix(ncol = 2, nrow = 100)
x <- runif(500, min = 0, max = 20)
y <- -2 + 3.5*x + rnorm(500, sd = 5)
population <- data.frame(x, y)
fit <- matrix(ncol = 2, nrow = 100)
for (i in 1:100){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
[i, ]
fit
plot(fit[ ,1])
hist(fit[ ,1])
density(fit[ ,1])
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 200)
for (i in 1:200){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
plot(density(fit[ ,1]))
plot(density(fit[ ,2]))
x <- runif(500, min = 0, max = 20)
u <- rnorm(500, sd = 5)
y <- -2 + 3.5*x
population <- data.frame(x, y)
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:500, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
var((x-mean(x))*u)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 5)
y <- -2 + 3.5*x
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
sigma_b1
fit <- matrix(ncol = 2, nrow = 250)
for (i in 1:250){
random_sample  <- population[ sample(1:n, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
fit[ ,2]
fit
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 5)
y <- -2 + 3.5*x
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 20), ]
fit[i, ]       <- lm(y ~ x, data= random_sample)$coefficients
}
fit[ ,2]
fit
1:n
population[ sample(1:n, 20), ]
random_sample  <- population[ sample(1:n, 20), ]
lm(y ~ x, data= random_sample)$coefficients
random_sample
lm(y ~ x, data= random_sample)$coefficients
random_sample
lm(y ~ x, data = random_sample)
random_sample
random_sample  <- population[ sample(1:n, 20), ]
random_sample
fit[i, ]       <- lm(random_sample$y ~ x, data = random_sample)$coefficients
fit[i, ]
lm(random_sample$y ~ random_sample$x, data = random_sample)$coefficients
random_sample
random_sample$y
random_sample$x
lm(random_sample$y ~ random_sample$x, data = random_sample)$coefficients
lm(random_sample$y ~ random_sample$x, data = random_sample)$coefficients
random_sample  <- population[ sample(1:n, 20), ]
lm(random_sample$y ~ random_sample$x, data = random_sample)$coefficients
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 50)
y <- -2 + 3.5*x
population <- data.frame(x, y)
random_sample  <- population[ sample(1:n, 20), ]
lm(random_sample$y ~ random_sample$x, data = random_sample)$coefficients
lm(random_sample$y ~ random_sample$x, data = random_sample)
summary(lm(random_sample$y ~ random_sample$x, data = random_sample))
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 10)
y <- -2 + 3.5*x + u
population <- data.frame(x, y)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 20), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
fit
fit[ ,2]
var(fit[ ,2])
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
sigma_b1
fit[ ,2]
var(fit[ ,2])
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 10)
y <- -2 + 3.5*x + u
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 20), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
var(fit[ ,2])
var((x-mean(x))*u) / (n * var(x)^2)
n <- 500
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 10)
y <- -2 + 3.5*x + u
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 50), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
var(fit[ ,2])
var(fit[ ,2])
var((x-mean(x))*u) / (n * var(x)^2)
n <- 1000
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 10)
y <- -2 + 3.5*x + u
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 1000), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
var(fit[ ,2])
var((x-mean(x))*u) / (n * var(x)^2)
n <- 1000
x <- runif(n, min = 0, max = 20)
u <- rnorm(n, sd = 10)
y <- -2 + 3.5*x + u
population <- data.frame(x, y)
sigma_b1 <- var((x-mean(x))*u) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, 100), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
var(fit[ ,2])
var(fit[ ,2])
var((x-mean(x))*u) / (n * var(x)^2)
var( ( x - mean(x) ) * u )
var(x)^2
(n * var(x)^2)
n * var(x)^2
sigma_b1 <- var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
sigma_b1
var(fit[ ,2])
pop_n <- 1000
x     <- runif(pop_n, min = 0, max = 20)
u     <- rnorm(pop_n, sd = 10)
y     <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
sigma_b1 <- var( ( x - mean(x) ) * u ) / (n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, n), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
var(fit[ ,2])
var( ( x - mean(x) ) * u ) / (n * var(x)^2)
var( ( x - mean(x) ) * u ) / (n * var(x)^2)
sigma_b1 <- var( ( x - mean(x) ) * u ) / (pop_n * var(x)^2)
sigma_b1
var(fit[ ,2])
pop_n <- 1000
x     <- runif(pop_n, min = 0, max = 20)
u     <- rnorm(pop_n, sd = 10)
y     <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
sigma_b1 <- var( ( x - mean(x) ) * u ) / (pop_n * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, n), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
sigma_b1
var(fit[ ,2])
lm(y ~ x, data = random_sample)$coefficients
var(fit[ ,2])
var(fit[ ,2])
var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
hist(fit[ ,2])
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
sigma_b1 <- var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:n, n), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
fit
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
random_sample  <- population[ sample(1:n, n), ]
random_sample
lm(y ~ x, data = random_sample)$coefficients
random_sample  <- population[ sample(1:n, n), ]
lm(y ~ x, data = random_sample)$coefficients
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
sigma_b1 <- var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
fit <- matrix(ncol = 2, nrow = n)
for (i in 1:n){
random_sample  <- population[ sample(1:pop_n, n), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
hist(fit[ ,2])
var(fit[ ,2])
var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
1 - (mean(x) / mean(x^2) * x
1 - mean(x) / mean(x^2) * x
1 - mean(x) / mean(x^2) * x
H_i      <- 1 - mean(x) / mean(x^2) * x
sigma_b0 <- var(H_i * u) / (n * mean(H_i^2)^2 )
sigma_b0
hist(fit[ ,1])
var(fit[ ,1])
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
mean(x^2)
x          <- runif(pop_n, min = 0, max = 1)
mean(x^2)
20^3 /60
x          <- runif(pop_n, min = 0, max = 20)
mean(x^2)
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
mean(x^2)
library(xtable)
df <- data.frame(cbind(c("a", "b"), c("$\\sin\\theta$", "$\\cos\\theta$")))
xtable(df, type="html")
xtable(df, type="html")
print(xtable(df), type="html", hline.after = NULL, sanitize.text.function=function(x){x})
print(xtable(df), hline.after = NULL, sanitize.text.function=function(x){x})
print(xtable(df), type=table_type, hline.after = NULL, sanitize.text.function=function(x){x})
table_type <- "html"
print(xtable(df), type=table_type, hline.after = NULL, sanitize.text.function=function(x){x})
print(xtable(df), type=table_type, hline.after = NULL, sanitize.text.function=function(x){x})
$$\sigma^2_\hat{\beta_1} = \frac{1}{n} \frac{var \left[ \left(X_i - \mu_X \right) u_i  \right]}
pop_n      <- 1000
x          <- runif(pop_n, min = 0, max = 20)
u          <- rnorm(pop_n, sd = 10)
y          <- -2 + 3.5*x + u
population <- data.frame(x, y)
n <- 100 # sample size
sigma_b1 <- var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
H_i      <- 1 - mean(x) / mean(x^2) * x
sigma_b0 <- var(H_i * u) / (n * mean(H_i^2)^2 )
number_of_estimations <- 500
fit <- matrix(ncol = 2, nrow = number_of_estimations)
for (i in 1:number_of_estimations){
random_sample  <- population[ sample(1:pop_n, n), ]
fit[i, ]       <- lm(y ~ x, data = random_sample)$coefficients
}
fit
var(fit[ ,1])
hist(fit[ ,1])
var(fit[ ,2])
hist(fit[ ,2])
sigma_b1
sigma_b0
(fit[ ,1])
var(fit[ ,1])
sigma_b1 <- var( ( x - mean(x) ) * u ) / (100 * var(x)^2)
sigma_b1
var(fit[ ,2])
var(fit[ ,1])
sigma_b0
fit
var(fit)
hist(fit[ ,1], main = "Histogram of the estimates of expression($\beta_1$)")
hist(fit[ ,1], main = "Histogram of the estimates of expression($\\beta_1$)")
expression($\\beta_1$)
hist(fit[ ,1], main = paste0("Histogram of the estimates of", expression($\\beta_1$))
hist(fit[ ,1], main = paste0("Histogram of the estimates of", expression(\\beta_1))
hist(fit[ ,1], main = paste0("Histogram of the estimates of", expression("\\beta_1)")
hist(fit[ ,1], main = paste0("Histogram of the estimates of", expression("\\beta_1")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", latex2exp("\\beta_1")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", TeX("\\beta_1")))
library(latex2exp)
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", TeX("\\beta_1")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", TeX("$\\beta_1$")))
latex2exp("$\\beta_1$")
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", latex2exp("$\\beta_1$")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", Tex("$\\beta_1$")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", Tex("$\\beta_1$")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(label = "beat[i]")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(label = "beata[i]")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(label = "beta[i]")))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(label = beta[i])))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(label = \\beta[i])))
hist(fit[ ,1], main = paste0("Histogram of the estimates of ", expression(beta[i])))
hist(fit[ ,1], main = "Histogram of the estimates of ", expression(beta[i]))
hist(fit[ ,1], main = expression(beta[i]))
hist(fit[ ,1], main = expression(aba beta[i]))
hist(fit[ ,1], main = expression(a ,beta[i]))
hist(fit[ ,1], main = bquote(beta[i]))
hist(fit[ ,1], main = bquote(a, beta[i]))
hist(fit[ ,1], main = bquote("a", beta[i]))
hist(fit[ ,1], main = bquote(a ~ beta[i]))
hist(fit[ ,1], main = bquote(The distribution of ~ beta[i]))
hist(fit[ ,1], main = bquote(The ~ distribution  ~ of ~ beta[i]))
hist(fit[ ,1], main = bquote(The ~ distribution  ~ of ~ 500 ~ beta[1] ~ estimates))
hist(fit[ ,2], , main = bquote(The ~ distribution  ~ of ~ 500 ~ beta[2] ~ estimates))
.libPaths()
library(markdown)
.libPaths()
install.packages("ggvis")
library(ggvis)
library(dplyr)
set.seed(123)
x     <- sort(runif(15, min = 30, max = 70 ))
y     <- rnorm(15 , mean = 200, sd = 50)
df    <- data.frame(y, x)
v <- input_slider(0, 250, value = 0, step = 25, animate = TRUE)
outlier <- function(y, v) y + c(rep(0, 14), v)
df %>%
ggvis(x = ~x, y = ~y)  %>%
mutate(y = outlier(y, eval(v))) %>%
layer_points() %>%
layer_model_predictions(model  = "lm", formula = y ~ x)
install.packages("rmarkdown")
